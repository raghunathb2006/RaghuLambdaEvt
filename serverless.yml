Transform: AWS::Serverless-2016-10-31
Resources:
  RaghuEvtRle1:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - body:*Raghu*
      EventBusName: RaghuEvtBus
      Targets:
        - Id: !Ref RaghuEvts3
          Arn: !GetAtt RaghuEvts3.Arn
  RaghuSmplTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  RaghuApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: RaghuApi
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /RaghuEvt:
            get:
              responses:
                '200':
                  description: default OK response
              x-amazon-apigateway-integration:
                credentials: !GetAtt RaghuApiToRaghuStateMachineRole.Arn
                httpMethod: POST
                type: aws
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:states:action/StartExecution
                responses:
                  default:
                    statusCode: 200
                requestTemplates:
                  application/json: !Sub |-
                    {
                      "input": "$util.escapeJavaScript($input.json('$'))",
                      "name": "$context.requestId",
                      "stateMachineArn": "${RaghuStateMachine}"
                    }
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
  RaghuStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        StartAt: RaghuEvts1
        States:
          RaghuEvts1:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              Payload.$: $
              FunctionName: ${RaghuEvts1}
            Next: RaghuEvts2
          RaghuEvts2:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: $.Payload
            Parameters:
              Payload.$: $
              FunctionName: ${RaghuEvts2}
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
            Next: RaghuEvts3Pub
          RaghuEvts3Pub:
            Type: Task
            Resource: arn:aws:states:::sns:publish
            Parameters:
              Message.$: $
              TopicArn: ${RaghuEvtBus}
            End: true
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt RaghuStateMachineLogGroup.Arn
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
              Resource: '*'
        - LambdaInvokePolicy:
            FunctionName: !Ref RaghuEvts1
        - LambdaInvokePolicy:
            FunctionName: !Ref RaghuEvts1
      Tracing:
        Enabled: true
      Type: STANDARD
      DefinitionSubstitutions:
        RaghuEvts2: !Ref AWS::NoValue
        RaghuEvts: !GetAtt RaghuEvts1.Arn
        RaghuEvts1: !Ref AWS::NoValue
        RaghuEvtBus: !Ref AWS::NoValue
      Events:
        RaghuApiGETRaghuEvt:
          Type: Api
          Properties:
            Path: /RaghuEvt
            Method: GET
            RestApiId: !Ref RaghuApi
  RaghuStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - /aws/vendedlogs/states/${AWS::StackName}-${ResourceId}-Logs
        - ResourceId: RaghuStateMachine
  RaghuApiToRaghuStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: !Sub apigateway.${AWS::URLSuffix}
      Policies:
        - PolicyName: ExecuteStateMachine
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !GetAtt RaghuStateMachine.Arn
  RaghuEvts2:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: RaghuEvts2
      CodeUri: src/Function2
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
  RaghuEvts2LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${RaghuEvts2}
  RaghuEvts3:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: RaghuEvts3
      CodeUri: src/Function2
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
  RaghuEvts3LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${RaghuEvts3}
  RaghuEvts1:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: RaghuEvts1
      CodeUri: src/Function
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      FunctionUrlConfig:
        AuthType: NONE
  RaghuEvts1LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${RaghuEvts1}
  RaghuEvtRle1ToRaghuEvts3Connector:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt RaghuEvts3.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RaghuEvtRle1.Arn
  RaghuEvtBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: <String>
